
@{
    Layout = null;
}

<!DOCTYPE html>
<html ng-app="app">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">    
    <meta charset="UTF-8">

    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gojs/1.8.4/go-debug.js"></script>
    
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.2/angular.min.js"></script>
    <script src="~/js/app.js"></script>
    <script src="~/js/DataService.js"></script>
    <script id="code">
        angular.module('app')
            .directive('goDiagram', function () {
          return {
            restrict: 'E',
            template: '<div></div>',  // just an empty DIV element
            replace: true,
            scope: { model: '=goModel' },
            link: function (scope, element, attrs) {
                //For implementing Layout
                function ContinuousForceDirectedLayout() {
                    go.ForceDirectedLayout.call(this);
                    this._isObserving = false;
                }
                go.Diagram.inherit(ContinuousForceDirectedLayout, go.ForceDirectedLayout);

                
                ContinuousForceDirectedLayout.prototype.isFixed = function (v) {
                    return v.node.isSelected;
                }

                // optimization: reuse the ForceDirectedNetwork rather than re-create it each time
                
                ContinuousForceDirectedLayout.prototype.doLayout = function (coll) {
                    if (!this._isObserving) {
                        this._isObserving = true;
                        // cacheing the network means we need to recreate it if nodes or links have been added or removed or relinked,
                        // so we need to track structural model changes to discard the saved network.
                        var lay = this;
                        this.diagram.addModelChangedListener(function (e) {
                            // modelChanges include a few cases that we don't actually care about, such as
                            // "nodeCategory" or "linkToPortId", but we'll go ahead and recreate the network anyway.
                            // Also clear the network when replacing the model.
                            if (e.modelChange !== "" ||
                                (e.change === go.ChangedEvent.Transaction && e.propertyName === "StartingFirstTransaction")) {
                                lay.network = null;
                            }
                        });
                    }
                    var net = this.network;
                    if (net === null) {  // the first time, just create the network as normal
                        this.network = net = this.makeNetwork(coll);
                    } else {  // but on reuse we need to update the LayoutVertex.bounds for selected nodes
                        this.diagram.nodes.each(function (n) {
                            var v = net.findVertex(n);
                            if (v !== null) v.bounds = n.actualBounds;
                        });
                    }
                    // now perform the normal layout
                    go.ForceDirectedLayout.prototype.doLayout.call(this, coll);
                    // doLayout normally discards the LayoutNetwork by setting Layout.network to null;
                    // here we remember it for next time
                    this.network = net;
                }
              // init for these samples -- you don't need to call this
              var $ = go.GraphObject.make;
              var diagram =  // create a Diagram for the given HTML DIV element
                $(go.Diagram, element[0],
                  {
                    nodeTemplate: $(go.Node, "Auto",
                                    new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                                    $(go.Shape, "RoundedRectangle", new go.Binding("fill","color"),
                                      {
                                        portId: "", cursor: "pointer", strokeWidth: 0,
                                        fromLinkable: true, toLinkable: true,
                                        fromLinkableSelfNode: true, toLinkableSelfNode: true,
                                        fromLinkableDuplicates: true, toLinkableDuplicates: true
                                      }),
                                    $(go.TextBlock, { margin: 8, editable: true },
                                      new go.Binding("text", "name").makeTwoWay())
                                  ),
                    linkTemplate: $(go.Link,
                                    { relinkableFrom: true, relinkableTo: true },
                                    $(go.Shape),
                                    $(go.Shape, { toArrow: "Standard", stroke: null, strokeWidth: 0 }),
                                    $(go.Panel, "Auto",
                                      $(go.Shape,  // the label background, which becomes transparent around the edges
                                        { fill: $(go.Brush, "Radial", { 0: "rgb(240, 240, 240)", 0.3: "rgb(240, 240, 240)", 1: "rgba(240, 240, 240, 0)" }),
                                            stroke: null }),
                                      $(go.TextBlock,  // the label text
                                        { textAlign: "center",
                                            font: "10pt helvetica, arial, sans-serif",
                                            stroke: "#555555",
                                            margin: 4 },
                                        new go.Binding("text", "rate")))
                                  ),
                    initialContentAlignment: go.Spot.Center,
                    "ModelChanged": updateAngular,
                    "ChangedSelection": updateSelection,
                    "undoManager.isEnabled": true,
                    layout: $(ContinuousForceDirectedLayout,  // automatically spread nodes apart while dragging
            { defaultSpringLength: 30, defaultElectricalCharge: 100 })
                  });
              // whenever a GoJS transaction has finished modifying the model, update all Angular bindings
              function updateAngular(e) {
                if (e.isTransactionFinished) {
                  scope.$apply();
                }
              }
              // update the Angular model when the Diagram.selection changes
              function updateSelection(e) {
                diagram.model.selectedNodeData = null;
                var it = diagram.selection.iterator;
                while (it.next()) {
                  var selnode = it.value;
                  // ignore a selected link or a deleted node
                  if (selnode instanceof go.Node && selnode.data !== null) {
                    diagram.model.selectedNodeData = selnode.data;
                    break;
                  }
                }
                scope.$apply();
              }
              // notice when the value of "model" changes: update the Diagram.model
              scope.$watch("model", function(newmodel) {
                var oldmodel = diagram.model;
                if (oldmodel !== newmodel) {
                  diagram.removeDiagramListener("ChangedSelection", updateSelection);
                  diagram.model = newmodel;
                  diagram.addDiagramListener("ChangedSelection", updateSelection);
                }
              });
              scope.$watch("model.selectedNodeData.name", function(newname) {
                if (!diagram.model.selectedNodeData) return;
                // disable recursive updates
                diagram.removeModelChangedListener(updateAngular);
                // change the name
                diagram.startTransaction("change name");
                // the data property has already been modified, so setDataProperty would have no effect
                var node = diagram.findNodeForData(diagram.model.selectedNodeData);
                if (node !== null) node.updateTargetBindings("name");
                diagram.commitTransaction("change name");
                // re-enable normal updates
                diagram.addModelChangedListener(updateAngular);
              });
            }
          };
            })
            .controller('MinimalCtrl', ['$scope', 'DataService','$location', function ($scope, DataService, $location) {
                $scope.model = new go.GraphLinksModel(
                    [
                       { key: 1, name: "Alpha", color: "lightblue" },
                       { key: 2, name: "Beta", color: "orange" },
                       { key: 3, name: "Gamma", color: "lightgreen" },
                       { key: 4, name: "Delta", color: "pink" }
                    ],
                    [
                          { from: 1, to: 2 },
                          { from: 1, to: 3 },
                          { from: 2, to: 2 },
                          { from: 3, to: 4 },
                          { from: 4, to: 1 }
                    ]);

                $scope.model.selectedNodeData = null;
                $scope.replaceModel = function (obj1,obj2) {
                    $scope.model = new go.GraphLinksModel(obj1,obj2);
                }

                $scope.papers;
                $scope.relations;
                $scope.params = location.pathname.split("/").pop();


                $scope.relLink = [];
                $scope.setRelLink = function (obj) {
                    for (var i = 0; i < obj.length; i++) {
                        
                        $scope.relLink.push({
                            from: obj[i].SourceId,
                            to: obj[i].RelatedId,
                            rate: obj[i].Rate,
                        })
                    }
                }

                $scope.relModel = [];
                $scope.setRelModel = function (obj,obj2) {
                    
                    for (var i = 0; i < obj.length; i++) {

                        for (var j = 0; j < obj2.length; j++) {

                            if (obj[i].PaperId === obj2[j].SourceId || obj[i].PaperId === obj2[j].RelatedId) {
                                $scope.relModel.push({
                                    key: obj[i].PaperId,
                                    name: obj[i].Name,
                                    color: "pink",
                                    writer: obj[i].Writer,
                                    url: obj[i].Link,
                                    year: obj[i].PublishYear
                                })
                                break;
                            }
                            
                        }
                    }
                }

                

                init();

                function init()
                {
                    DataService.search($scope.params).then(function (response) {
                        $scope.relations = response.Value;
                        $scope.setRelLink($scope.relations);
                        DataService.getPapers().then(function (response) {
                            $scope.papers = response.Value;
                            console.log($scope.papers);
                            $scope.setRelModel($scope.papers,$scope.relations);

                           
                            console.log($scope.relModel);
                            console.log($scope.relLink);
                            $scope.model = new go.GraphLinksModel($scope.relModel, $scope.relLink);
                            //$scope.model.addNodeDataCollection($scope.relModel);
                            //$scope.mode.addLinkDataCollection($scope.relLink);
                            console.log($scope.model);

                        })
                    })
                }

            }]);
    </script>
</head>
<body ng-controller="MinimalCtrl">
    <!-- only needed for the goSamples framework -->
    <div id="sample">
            
        <go-diagram class="graph" go-model="model" style="border: solid 1px black; width:50%; height:500px"></go-diagram>
        @*<div class="graphinfo">
            Selected Paper Name:{{model.selectedNodeData.name}}
            <br />
            Selected Paper Writer: {{model.selectedNodeData.writer}}
            <br />
            Selected Paper Url: {{model.selectedNodeData.url}}
            <br />
            Selected Paper Publish Year: {{model.selectedNodeData.year}}

            <p>{{papers}}</p>
            <p>{{relLink}}</p>
        </div>*@
        
    </div>
</body>
</html>